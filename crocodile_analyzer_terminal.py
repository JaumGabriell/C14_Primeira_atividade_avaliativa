#!/usr/bin/env python3

import pandas as pd
import os
import sys

class CrocodileAnalyzer:

    
    def __init__(self, csv_file):
        
        self.csv_file = csv_file
        self.data = None
        self.load_data()
    
    def load_data(self):

        try:
            self.data = pd.read_csv(self.csv_file)
            print(f"Dataset carregado com sucesso! {len(self.data)} observa√ß√µes encontradas.\n")
        except FileNotFoundError:
            print(f"Erro: Arquivo {self.csv_file} n√£o encontrado!")
            sys.exit(1)
        except Exception as e:
            print(f"Erro ao carregar dados: {e}")
            sys.exit(1)
    
    def function_1_basic_info(self):
        print("=" * 60)
        print("INFORMA√á√ïES B√ÅSICAS DO DATASET")
        print("=" * 60)
        print(f"Total de observa√ß√µes: {len(self.data)}")
        print(f"Total de colunas: {len(self.data.columns)}")
        print(f"Tamanho em mem√≥ria: {self.data.memory_usage(deep=True).sum() / 1024:.2f} KB")
        print(f"\nColunas dispon√≠veis:")
        for i, col in enumerate(self.data.columns, 1):
            print(f"  {i:2d}. {col}")
        print(f"\nTipos de dados:")
        print(self.data.dtypes)
    
    def function_2_species_count(self):
        print("=" * 60)
        print("CONTAGEM POR ESP√âCIE")
        print("=" * 60)
        species_count = self.data['Common Name'].value_counts()
        for i, (species, count) in enumerate(species_count.head(10).items(), 1):
            print(f"{i:2d}. {species:<35} | {count:3d} observa√ß√µes")
        print(f"\nTotal de esp√©cies √∫nicas: {len(species_count)}")
    
    def function_3_size_statistics(self):
        print("=" * 60)
        print("ESTAT√çSTICAS DE COMPRIMENTO")
        print("=" * 60)
        length_data = self.data['Observed Length (m)'].dropna()
        print(f"M√©dia: {length_data.mean():.2f} metros")
        print(f"Mediana: {length_data.median():.2f} metros")
        print(f"Desvio padr√£o: {length_data.std():.2f} metros")
        print(f"M√≠nimo: {length_data.min():.2f} metros")
        print(f"M√°ximo: {length_data.max():.2f} metros")
        print(f"1¬∫ Quartil: {length_data.quantile(0.25):.2f} metros")
        print(f"3¬∫ Quartil: {length_data.quantile(0.75):.2f} metros")
        print(f"Total de medi√ß√µes v√°lidas: {len(length_data)}")
    
    def function_4_weight_statistics(self):
        print("=" * 60)
        print("ESTAT√çSTICAS DE PESO")
        print("=" * 60)
        weight_data = self.data['Observed Weight (kg)'].dropna()
        print(f"M√©dia: {weight_data.mean():.2f} kg")
        print(f"Mediana: {weight_data.median():.2f} kg")
        print(f"Desvio padr√£o: {weight_data.std():.2f} kg")
        print(f"M√≠nimo: {weight_data.min():.2f} kg")
        print(f"M√°ximo: {weight_data.max():.2f} kg")
        print(f"1¬∫ Quartil: {weight_data.quantile(0.25):.2f} kg")
        print(f"3¬∫ Quartil: {weight_data.quantile(0.75):.2f} kg")
        print(f"Total de medi√ß√µes v√°lidas: {len(weight_data)}")
    
    def function_5_habitat_distribution(self):
        print("=" * 60)
        print("DISTRIBUI√á√ÉO POR HABITAT")
        print("=" * 60)
        habitat_dist = self.data['Habitat Type'].value_counts()
        for i, (habitat, count) in enumerate(habitat_dist.items(), 1):
            percentage = (count / len(self.data)) * 100
            print(f"{i:2d}. {habitat:<25} | {count:3d} ({percentage:5.1f}%)")
    
    def function_6_conservation_status(self):
        print("=" * 60)
        print("STATUS DE CONSERVA√á√ÉO")
        print("=" * 60)
        conservation = self.data['Conservation Status'].value_counts()
        for status, count in conservation.items():
            percentage = (count / len(self.data)) * 100
            print(f"{status:<20} | {count:3d} ({percentage:5.1f}%)")
    
    def function_7_age_class_analysis(self):
        print("=" * 60)
        print("DISTRIBUI√á√ÉO POR IDADE")
        print("=" * 60)
        age_dist = self.data['Age Class'].value_counts()
        for age, count in age_dist.items():
            percentage = (count / len(self.data)) * 100
            print(f"{age:<15} | {count:3d} ({percentage:5.1f}%)")
            
    def function_8_sex_distribution(self):
        print("=" * 60)
        print("DISTRIBUI√á√ÉO POR SEXO")
        print("=" * 60)
        sex_dist = self.data['Sex'].value_counts()
        for sex, count in sex_dist.items():
            percentage = (count / len(self.data)) * 100
            print(f"{sex:<10} | {count:3d} ({percentage:5.1f}%)")
    
    def function_9_country_analysis(self):
        print("=" * 60)
        print("OBSERVA√á√ïES POR PA√çS/REGI√ÉO")
        print("=" * 60)
        country_dist = self.data['Country/Region'].value_counts()
        for i, (country, count) in enumerate(country_dist.head(15).items(), 1):
            percentage = (count / len(self.data)) * 100
            print(f"{i:2d}. {country:<25} | {count:3d} ({percentage:5.1f}%)")
    
    def function_10_largest_specimens(self):
        print("=" * 60)
        print("MAIORES ESP√âCIMES (COMPRIMENTO)")
        print("=" * 60)
        largest = self.data.nlargest(10, 'Observed Length (m)')
        for i, (idx, row) in enumerate(largest.iterrows(), 1):
            print(f"{i:2d}. {row['Common Name']:<30} | {row['Observed Length (m)']:5.2f}m | {row['Country/Region']}")


def show_menu():
    print("\n" + "=" * 80)
    print("üêä AN√ÅLISE INTERATIVA DO DATASET DE CROCODILOS üêä")
    print("=" * 80)
    print("Escolha uma das 20 op√ß√µes de an√°lise:")
    print()
    
    options = [
        "1.  Informa√ß√µes b√°sicas do dataset",
        "2.  Contagem por esp√©cie",  
        "3.  Estat√≠sticas de comprimento",
        "4.  Estat√≠sticas de peso",
        "5.  Distribui√ß√£o por habitat",
        "6.  Status de conserva√ß√£o",
        "7.  An√°lise por classe et√°ria",
        "8.  Distribui√ß√£o por sexo",
        "9.  An√°lise por pa√≠s/regi√£o",
        "10. Maiores esp√©cimes (comprimento)",
    ]
    
    
    for i in range(0, len(options), 2):
        left = options[i] if i < len(options) else ""
        right = options[i+1] if i+1 < len(options) else ""
        print(f"{left:<40} {right}")
    
    print()
    print("0.  Sair")
    print("=" * 80)

def main():
    
    csv_file = 'crocodile_dataset.csv'
    if not os.path.exists(csv_file):
        print(f"Arquivo {csv_file} n√£o encontrado no diret√≥rio atual!")
        print("Certifique-se de que o arquivo est√° no mesmo diret√≥rio do programa.")
        return
    

    analyzer = CrocodileAnalyzer(csv_file)
    

    functions = {
        1: analyzer.function_1_basic_info,
        2: analyzer.function_2_species_count,
        3: analyzer.function_3_size_statistics,
        4: analyzer.function_4_weight_statistics,
        5: analyzer.function_5_habitat_distribution,
        6: analyzer.function_6_conservation_status,
        7: analyzer.function_7_age_class_analysis,
        8: analyzer.function_8_sex_distribution,
        9: analyzer.function_9_country_analysis,
        10: analyzer.function_10_largest_specimens,
    }
    
    
    while True:
        show_menu()
        
        try:
            choice = input("Digite sua op√ß√£o (0-20): ").strip()
            
            if choice == '0':
                print("\nObrigado por usar o Analisador de Crocodilos! At√© mais!")
                break
            
            choice_int = int(choice)
            
            if choice_int in functions:
                print("\n")
                functions[choice_int]()
                input("\nPressione ENTER para continuar...")
            else:
                print("Op√ß√£o inv√°lida! Por favor, digite um n√∫mero de 0 a 20.")
                input("Pressione ENTER para continuar...")
                
        except ValueError:
            print("Por favor, digite apenas n√∫meros!")
            input("Pressione ENTER para continuar...")
        except KeyboardInterrupt:
            print("\n\nPrograma interrompido pelo usu√°rio. At√© mais!")
            break
        except Exception as e:
            print(f"Erro inesperado: {e}")
            input("Pressione ENTER para continuar...")

if __name__ == "__main__":
    main()
