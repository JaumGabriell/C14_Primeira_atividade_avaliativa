name: CI/CD Pipeline - Crocodile Analyzer

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: 

env:
  PYTHON_VERSION: "3.10"
  PIPELINE_EMAIL_RECIPIENT: ${{ secrets.PIPELINE_EMAIL_RECIPIENT }}
  PIPELINE_EMAIL_SENDER: ${{ secrets.PIPELINE_EMAIL_SENDER }}
  PIPELINE_SMTP_SERVER: ${{ secrets.PIPELINE_SMTP_SERVER }}
  PIPELINE_SMTP_PORT: ${{ secrets.PIPELINE_SMTP_PORT }}

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  tests:
    name: " Tests (Unit & Mock)"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install testing dependencies and requirements
        run: |
          echo " Instalando software necessário via script..."
          python -m pip install --upgrade pip
          pip install pytest pytest-html pytest-cov pytest-xvfb pytest-mock
          pip install coverage[toml]
          if [ -f requirements.txt ]; then 
            echo " Instalando dependências do projeto..."
            pip install -r requirements.txt
          else
            echo "Instalando dependências essenciais..."
            pip install pandas
          fi
      - name: Run unit tests with coverage (20+ scenarios)
        run: |
          echo " Executando testes unitários e mock..."
          python -m pytest test_crocodile_analyzer.py \
            --verbose \
            --tb=short \
            --cov=crocodile_analyzer_terminal \
            --cov-report=html:test-reports/coverage-html \
            --cov-report=xml:test-reports/coverage.xml \
            --cov-report=term-missing \
            --html=test-reports/pytest-report.html \
            --self-contained-html \
            --junit-xml=test-reports/junit.xml
      - name: Generate test summary
        run: |
          echo " Gerando resumo dos testes..."
          echo "##  Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          TOTAL_TESTS=$(python -c "import re; content=open('test_crocodile_analyzer.py').read(); print(len(re.findall(r'def test_\\d+', content)))")
          echo "**Total de testes encontrados:** $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ $TOTAL_TESTS -ge 20 ]; then
            echo " **Requisito atendido:** $TOTAL_TESTS testes >= 20 cenários exigidos" >> $GITHUB_STEP_SUMMARY
          else
            echo " **Requisito NÃO atendido:** $TOTAL_TESTS testes < 20 cenários exigidos" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo " **Artefatos gerados:**" >> $GITHUB_STEP_SUMMARY
          echo "- Relatório HTML de testes" >> $GITHUB_STEP_SUMMARY
          echo "- Relatório de cobertura (HTML + XML)" >> $GITHUB_STEP_SUMMARY
          echo "- Relatório JUnit XML" >> $GITHUB_STEP_SUMMARY
      - name: Upload test reports as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            test-reports/
          retention-days: 30
      - name: Upload coverage to workflow summary
        if: always()
        run: |
          if [ -f test-reports/coverage.xml ]; then
            echo " **Coverage Report disponível nos artefatos**" >> $GITHUB_STEP_SUMMARY
          fi
 
  build:
    name: " Build & Package"
    runs-on: ubuntu-latest
    steps:
      - name:  Checkout repository
        uses: actions/checkout@v4
      - name:  Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name:  Install build dependencies
        run: |
          echo " Instalando software necessário para build..."
          python -m pip install --upgrade pip
          pip install build wheel setuptools
          if [ -f requirements.txt ]; then 
            pip install -r requirements.txt
          else
            pip install pandas
          fi
      - name:  Make build script executable
        run: |
          chmod +x scripts/build_package.py
      - name:  Build application package
        run: |
          echo " Executando script de empacotamento..."
          python scripts/build_package.py
      - name:  Generate build summary
        run: |
          echo "##  Build Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Status:**  Concluída com sucesso" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo " **Artefatos gerados:**" >> $GITHUB_STEP_SUMMARY
          for file in crocodile-analyzer-*.{zip,tar.gz}; do
            if [ -f "$file" ]; then
              size=$(du -h "$file" | cut -f1)
              echo "- $file ($size)" >> $GITHUB_STEP_SUMMARY
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo " **Conteúdo do pacote:**" >> $GITHUB_STEP_SUMMARY
          echo "- Aplicação principal (crocodile_analyzer_terminal.py)" >> $GITHUB_STEP_SUMMARY
          echo "- Dataset (crocodile_dataset.csv)" >> $GITHUB_STEP_SUMMARY
          echo "- Dependências (requirements.txt)" >> $GITHUB_STEP_SUMMARY
          echo "- Documentação (README.md, INSTALL.md)" >> $GITHUB_STEP_SUMMARY
          echo "- Informações da build (build-info.json)" >> $GITHUB_STEP_SUMMARY
      - name:  Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: application-packages
          path: |
            crocodile-analyzer-*.zip
            crocodile-analyzer-*.tar.gz
            dist/
          retention-days: 90